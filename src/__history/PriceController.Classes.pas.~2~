unit PriceController.Classes;

interface

uses
  Price.Interfaces, System.Classes, System.Generics.Collections;

type
  TPriceController = class(TInterfacedObject, iPriceController)
    private
      FPriceDict  : TDictionary<Integer, String>;

    public
      constructor Create;
      destructor Destroy; override;
      class function New  : iPriceController;

      function Registry(aKey  : Integer; aValue : String) : iPriceController;
      function ListPrice(aValue : TStrings) : iPriceController;

  end;

implementation

{ TPriceController }

constructor TPriceController.Create;
begin
  FPriceDict  := TDictionary<Integer, String>;

end;

destructor TPriceController.Destroy;
begin
  FPriceDict.Free;

  inherited;
end;

function TPriceController.ListPrice(aValue: TStrings): iPriceController;
begin

end;

class function TPriceController.New: iPriceController;
begin
  Result := Self.Create;

end;

function TPriceController.Registry(aKey: Integer;
  aValue: String): iPriceController;
begin
  Result      := Self;
  FPriceDict.Add(aKey, aValue);

end;

end.
